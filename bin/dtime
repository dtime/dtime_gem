#!/usr/bin/env ruby

# Try loading bundler if it's possible
begin
  require 'bundler/setup'
rescue LoadError
  # no problem
end

# Try loading bundler if it's possible
begin
  require 'highline'
rescue LoadError
  warn "The dtime binary requires highline to be installed."
  warn "Please run: gem install highline"
  exit
end

# Add lib to load path
$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib'))

# Load dtime
require 'dtime'
require "commander/import"
# :name is optional, otherwise uses the basename of this executable
program :name, 'dtime command line client'
program :version, '1.0.0'
program :description, 'A command line client for interacting with the dtime api'

default_command :console

command :console do |c|
  c.option '--endpoint ENDPOINT', String, 'Set the dtime api endpoint (for testing)'
  c.action do |args, options|
    options.default \
      :endpoint => "https://api.dtime.com"
    command_loop!(initialize!(options))
    puts 'goodbye!'
  end
end


def initialize!(options)
  Dtime.new({
    endpoint: options.endpoint
  })
end
def command_loop!(client)
  @client = client
  @client.home

  loop do
    verbs = %w(get post patch put options head)
    available_links = []
    say "Available Links"
    @client.links.each do |rel, link|
      say "\t#{rel} (#{link.href.gsub(@client.endpoint, '')})"
      available_links.push(rel)
    end

    choose("> ") do |menu|
      menu.readline = true
      menu.shell = true
      menu.prompt = ">  "
      menu.index = :none
      menu.layout = "#{@prompt}"

      menu.choice("quit"){ say "Goodbye"; exit }
      verbs.each do |v|
        menu.choice(v){|cmd, opts|
          link = @client.link_for_rel(opts)
          if link
            execute(cmd, @client.link_for_rel(opts))
          else
            say "Please choose from available links"
          end
        }
      end
      available_links.each do |l|
        menu.choice(l){|cmd, opts|
          execute(:get, @client.link_for_rel(cmd))
        }
      end
    end
  end
end

def execute(cmd, link)
  @client.follow(link)
  @client.send(cmd)
rescue Dtime::Error => e
  say e.message
end

